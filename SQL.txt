php 10 страница

https://www.youtube.com/watch?v=yOkj-PbCPQ8&list=PLDywto_IU4_4RU0sKfID6OY-np6uGmhlf
уроки SQL

https://www.it-academy.by/course/osnovy-programmirovaniya/bazy-dannykh-osnovy/
бесплатный курс SQL


https://www.w3schools.com/sql/default.asp
можно по практиковаться Нажать кнопку Try it yourself, далее в новом окне нажать на кнопку Run
SQL!!!


1)SHOW DATABASES
--Отображает базы данных управляемых сервером 


2)SHOW TABLES
--отображение всех таблиц в текущей базе данных


3)SHOW COLUMNS FROM customers
-- отображает столбцы в нашей таблице


4)SELECT FirstName FROM customers 
Выбирает всю колонку FirstName из таблицы customers 


5)
SELECT FirstName FROM customers;
SELECT City FROM customers;
--вытянем две колонки


6)select City from customers;
SELECT City FROM customers;
--и так и так сработает но лучше в верхнем регистре 


7)SELECT  City 
From customers; 
--можно и так писать 


8)SELECT FirstName, LastName, City 
FROM customers;
-- выбираем несколько колонок из таблицы 


9)SELECT * FROM customers;
--Выбираем все колонки в таблице 


10)SELECT DISTINCT City FROM customers;
--повторяющиеся значения будут убраны, distinct выбирает только уникальные значения 


11)SELECT ID, FirstName, LastName, City
FROM customers LIMIT 5;
-- первые пять колонок будут выбраны


12)SELECT ID, FirstName, LastName, City
FROM customers LIMIT 3, 4;
Подбираем 4 записи начиная с третьей 


Выведит таблицу с id от 4 до 8


13)SELECT DISTINCT NAME
FROM students
ORDER BY NAME;
-----выберет уникальные значения по name из таблицы students отсортированные по имени 


 ORDER BY сортирует а возрастающем порядке если имя то по алфавиту


14) SELECT * FROM customers
WHERE ID = 7;
--вытянем всем записи которые соответствуют критерию 


WHERE:
!= Не равно 
= Равно
>Больше чем
< Меньше чем 
>= Больше либо равно
<= Меньше либо равно
BETWEEN  между включенного диапазона 


SELECT * FROM customers 
WHERE ID != 5;
---- вытяните все кроме 5 id 






SELECT * FROM customers 
WHERE ID BETWEEN 3 AND 7;
С трёх до 7 вытяните все строки 








15)при работе с текстом из столбцов заключайте все в кавычки
SELECT ID, FirstName, LastName,City
FROM customers
WHERE City = 'New York';
--выбираем пользователей у которых город New York


16)


AND верно если оба выражения Верны
OR верно если одно из выражений Верно. Или оба верны
IN верно, если операнд равен одному из выражений в списке 
NOT возвращает Верно если выражение не верно 


SELECT ID FirstName, LastName, Age
FROM customers
WHERE Age >= 30 AND Age <=40;


Вытяним  людей в возрасте от 30 до 40


17)SELECT * FROM customers
WHERE City = 'New York' OR City = 'Chicago';
--выведит всех кто с New York или Чикаго


18)SELECT * FROM customers 
WHERE City = 'New York'
AND (Age=30 OR Age =35);
-- выберет всех кто с New York в возрасте от 30 до 35


19)SELECT * FROM customers
WHERE City = 'New York'
OR City = 'los angeles'
OR City = 'Chicago';
-- выберу клиентов из этих городов 




SELECT * FROM customers
WHERE  City IN (New York', 'Los Angeles', 'Chicago');


-- выведит тоже самое что и выше 


NOT IN позволяет исключить города которые мы не хотим выводить


SELECT * FROM customers
WHERE City NOT IN ('New York', 'Los Angeles', 'Chicago');


20)Функция CONCAT используется для конкатенации двух и более текстовых значений, и для возврата полученной строки.
Давайте соединим FirstName с City, разделив их запятой:


SELECT CONCAT (FirstName, ' , ' , City)
FROM customers;


Конкатенация образует новый столбец. Названием столбца по умолчанию будет функция CONCAT.
Вы можете присвоить свое имя образованному столбцу, с помощью ключевого слова AS:


SELECT CONCAT (FirstName, ' , ' , City) AS
new_column
FROM customers;
Объединим таблицы и дадим название им 


21)Арифметические операторы выполняют арифметические операции с числовыми операндами. Арифметические операторы включают в себя сложение (+), вычитание (-), умножение (*) и деление (/). 


SELECT ID, FirstName, LastName, Salary+500 AS Salary
FROM employees;


-- каждой колонки добавим плюс 500


22. SELECT FirstName, UPPER(LastName) AS LastName
        FROM employees;
-- делаем всё значения в верхнем регистре


23 Функция SQRT возвращает квадратный корень заданного значения в аргументе.
Давайте посчитаем квадратный корень каждой зарплаты:


SELECT Salary, SQRT(Salary)
FROM employees;


-- колонку Salary считаем квадратный корень просто будет вторая колонка с квадратным номером 




В случае использования функции AVG, возвращается среднее значение числового столбца: 


SELECT AVG(Salary) FROM employees;


Функция SUM используется для подсчета суммы значений столбцов 
Например, для получения суммы всех зарплат в таблице employees, наш SQL запрос должен выглядеть следующим образом:


SELECT SUM(Salary) FROM employees;
Посчитаем общую сумму 




24 Подзапрос это запрос внутри другого запроса. 
Давайте рассмотрим пример. Нам может понадобиться список всех работников, чьи зарплаты выше средней.


Сперва, подсчитаем среднюю зарплату:


SELECT AVG(Salary) FROM employees;


Теперь, когда мы знаем среднюю зарплату, мы можем использовать простое выражение WHERE для отображения списка зарплат, которые больше этого числа.


SELECT FirstName, Salary FROM employees
WHERE Salary > 3100
ORDER BY Salary DESC;


Ключевое слово DESC сортирует результаты в порядке убывания. 
По аналогии, ASC сортирует результаты в порядке возрастания.




SELECT FirstName, Salary FROM employees
WHERE Salary > (SELECT AVG(Salary) FROM employees) ORDER BY Salary DESC;


Будет тоже самое что выше 


Закрывайте подзапросы в скобки. 
Также, обратите внимание, что нет точки с запятой в конце подзапроса, потому что он является частью нашего запроса.


25
Например, чтобы выбрать работников, чьи FirstNames начинаются с буквы A, вам необходимо использовать следующий запрос: 


SELECT * FROM employees
WHERE FirstName LIKE 'A%';


Результат выведит все имена начинающие на А 


В качестве другого примера, следующий SQL запрос выбирает всех работников с LastName заканчивающимся буквой "s":


SELECT * FROM employees
WHERE LastName LIKE '%s';


Результат выведит все что заканчивается s 


26
Функция MIN
Функция MIN используется для возврата минимального значения выражения в операторе SELECT.
Например, вы можете захотеть узнать минимальную зарплату среди работников


SELECT MIN(Salary) AS Salary FROM employees;
Вытяните минимальную зарплату из таблицы




27
 SELECT customers.name, items.names
FROM customers, items
WHERE items.seller_id=customers.id
Объединение таблиц 


28 объединение таблиц 
SELECT ct.ID, ct.Name, ord.Name, ord.Amount
FROM customers AS ct, orders AS 
ord
WHERE ct.ID=ord.Customer_ID
ORDER BY ct.ID;


Типы JOIN (объединений), которые могут быть использованы в MySQL:
- INNER JOIN
- LEFT JOIN
- RIGHT JOIN
INNER JOIN (Внутреннее Объединение) эквивалентно JOIN. Оно возвращает строки, если они совпадают в таблицах.


SELECT column_name(s)
FROM table1 INNER JOIN table2
ON table1.column_name=table2.column_name;
INNER JOIN
Объединение таблиц там где они пересекаются между собой.






LEFT JOIN
LEFT JOIN возвращает все строки из левой таблицы, даже, если нет соответствий в правой таблице. 
Это значит, что если нет соответствий в выражении ON в таблице справа, объединение будет возвращать строки из первой таблицы в результат.
Базовый синтаксис объединения LEFT JOIN выглядит следующим образом


SELECT customers.Name, items.Name
FROM customers LEFT OUTER JOIN items
ON customers.ID=ITEMS.Seller_id;


LEFT JOIN 
Возвращает все строки слева даже если нету совпадений с правой таблицей там где нету совпадений NULL






RIGHT JOIN
RIGHT JOIN возвращает все строки из правой таблицы, даже если нет соответствий в левой таблице


Опять же, ключевое слово OUTER является опциональным, и может быть опущено.


SELECT customers.Name, items.Name FROM customers
RIGHT JOIN items ON
customers.ID=items.Seller_id;




28


Установка Операции
Время от времени, вам может понадобиться комбинация информации из нескольких таблиц в один набор данных. Это может использоваться в таблицах с аналогичными данными внутри одной базы данных, или может быть необходимость объединения аналогичной информации между базами данных, или даже на сервере. 
Чтобы это сделать, используйте операторы UNION и UNION ALL. 
UNION комбинирует несколько наборов данных в один набор, и убирает любые существующие дубликаты.
UNION ALL комбинирует несколько наборов данных в один набор, но не убирает дублирующиеся строки. 




Оператор UNION используется для комбинирования наборов результатов двух и более выражений SELECT.




Оператор UNION используется для комбинирования наборов результатов двух и более выражений SELECT.
Все выражения SELECT внутри UNION должны иметь одинаковое количество столбцов. Столбцы также должны иметь одинаковые типы данных. Также, столбцы в каждом выражении SELECT должны быть в одинаковом порядке.
Синтаксис оператора UNION выглядит следующим образом: 


SELECT ID, FirstName, LastName, City FROM First
UNION
SELECT ID, FirstName, LastName, City FROM Second;
Объединяем две таблицы без дубликатов 






UNION ALL
UNION ALL выбирает все строки из каждой таблицы и комбинирует их в одну таблицу. 
Следующее SQL выражение использует UNION ALL для выбора информации из Первой и Второй таблиц:
SELECT ID,FirstName, LastName, City FROM First
UNION ALL
SELECT ID, FirstName, LastBName,
City FROM Second;


В результате набор также содержит дубликаты строк.






29


Вставка Информации
Таблицы SQL хранят данные в строках, одна строка после другой. Выражение INSERT INTO используется для добавления новых строк информации в таблицу базы данных. 
Синтаксис SQL INSERT INTO выглядит так








INSERT INTO Employees
VALUES (8, 'Antony', 'Young', 35);


Убедитесь, что значения находятся в том же порядке, что и столбцы в таблице.




А  можно сделать и так 


INSERT INTO Employees(ID, FirstName, LastName, Age)
VALUES (8, 'Anthony', 'Young', 35);


Вставка Информации
Также является возможным вставка информации только в указанные столбцы


INSERT INTO Employees (ID, 'FirstName', 'LastName' )
VALUES (9, 'Samuel', 'Clark');


30
Обновление Данных
Выражение UPDATE позволяет нам изменять данные в таблице. 
Базовый синтаксис запроса UPDATE с выражением WHERE выглядит следующим образом:


UPDATE Employees
SET Salary=5000 -- что менять 
WHERE ID=1; --указываю строку где менять 


Если вы опустите условие WHERE, то все записи в таблице будут обновлены!




Обновление Нескольких Столбцов
Также можно обновлять несколько столбцов одновременно, разделяя их запятыми:


UPDATE Employees
SET Salary=5000, FirstName='Robert'
WHERE ID=1;


Просто через запятую указываю что менять.


Вы можете определить порядок столбцов любым образом в выражении SET.


Удаление Данных
Выражение DELETE используется для удаления данных из вашей таблицы. Запросы DELETE работают похожим образом на UPDATE запросы.[x]


DELETE FROM Employees
WHERE ID=1;


Удаляю строку, полностью пользователя.


Если вы опустите выражение WHERE, то все записи в таблице будут удалены!
Выражение DELETE удаляет данные из таблицы навсегда




31 создание sql таблиц


Одна база данных может хранить сотни таблиц, каждая из которых играет свою уникальную роль в схеме базы данных. 
SQL таблицы включают в себя строки и столбцы. Столбцы таблиц ответственны за хранение различных типов данных, включая числа, текст, даты и даже файлы.
Выражение CREATE TABLE используется для создания новой таблицы.


При создании таблицы необходимо назвать таблицу, определить ее столбцы и тип данных каждого столбца.


CREATE TABLE table_name
(
column_name1 data_type(size),
column_name2 data_type(size),
column_name3 data_type(size),
....
columnN data_type(size)
);


Параметр column_name указывает на имена столбцов, которые мы хотим создать.
- Параметр data_type определяет, какой тип данных может хранить столбец. Например, используйте int для целых чисел.
- Параметр size определяет максимальную длину столбца таблицы.










CREATE TABLE Users
(
   UserID int,
   FirstName varchar(100), 
   LastName varchar(100),
   City varchar(100)
); 


varchar это тип данных, хранящий символы. Вы определяете число символов в скобках после типа. В вышеуказанном примере, наши поля могут содержать текст с максимальной длиной в 100 символов.




Типы Данных
Типы данных определяют тип для конкретного столбца.
Если столбец с названием "LastName" будет хранить имена, то этот столбец должен иметь тип данных "varchar" (variable-length character).
Наиболее часто используемые типы данных:
Числовые
INT - Целое число нормального размера, которое может быть знаковым, или беззнаковым.
FLOAT(M,D) - Число с плавающей точкой, которое не может быть беззнаковым. Вы также можете определить отображаемую длину (M) и количество чисел после десятичной точки (D).
DOUBLE(M,D) - Число с плавающей точкой двойной точности, которое не может быть беззнаковым. Вы также можете определить отображаемую длину (M) и количество чисел после десятичной точки (D). 


Дата и Время 
DATE - Дата в формате YYYY-MM-DD (Год-Месяц-День).
DATETIME - Дата и время в формате YYYY-MM-DD HH:MM:SS (Год-Месяц-день Часы:Минуты:Секунды).
TIMESTAMP - Временная метка, подсчитываемая от полночи 1 Января, 1970
TIME - Хранит время в формате HH:MM:SS (Часы:Минуты:Секунды).


Строковые Типы
CHAR(M) - Строка символов фиксированной длины. Размер указывается в скобках. Максимальный размер 255 байт.
VARCHAR(M) - Строка символов с варьирующейся длиной. Максимальный размер указывается в скобках.
BLOB - "Бинарные Большие Объекты" используются для хранения большого количества двоичных данных, типа изображений или других файлов. 
TEXT - Большое количество текстовой информации.


Выбор корректного типа данных для ваших столбцов является ключом к качественной разработке базы данных.






32 Первичные Ключи
UserID является наилучшим выбором для первичного ключа нашей пользовательской таблицы.
Определите его в качестве первичного ключа при создании таблицы, используя ключевое слово PRIMARY KEY. 


CREATE TABLE Users
(
   UserID int,
   FirstName varchar(100),
   LastName varchar(100),
   City varchar(100),
   PRIMARY KEY(UserID)
); 


Укажите название столбца в скобах ключевого слова PRIMARY KEY.


Теперь вы можете использовать запросы INSERT INTO для вставки информации в таблицу.




33. Ограничения


SQL ограничения используются для определения правил для табличных данных.
Наиболее часто используемые SQL ограничения:
NOT NULL - Указывает, что столбец не может содержать значение NULL.
UNIQUE - Запрещает вставлять повторяющиеся значения в столбец. Ограничение UNIQUE управляет уникальностью столбца в таблице. В таблице может использоваться несколько уникальных столбцов.
PRIMARY KEY - Заставляет таблицу принимать уникальные данные для определенного столбца, также это ограничение создает уникальный индекс для быстрого доступа к таблице.
CHECK - Определяет, является ли значение подходящим, или нет.
DEFAULT - При вставке данных в таблицу, если столбцу не предоставляется значение, то он получает значение установленное по умолчанию (DEFAULT).
Например, следующее выражение означает, что к имени столбца запрещено применять значения NULL.


name varchar(100) NOT NULL


Во время создания таблицы, определяйте уровень ограничения(ий) столбца после типа данных этого столбца.




34


AUTO INCREMENT
Авто-инкремент позволяет генерировать уникальные числа при добавлении новой записи в таблицу.
Часто, мы хотим, чтобы значение первичного ключа создавалось автоматически каждый раз при добавлении новой записи.
По умолчанию, стартовое значение AUTO_INCREMENT равняется 1, и будет инкрементироваться на 1 для каждой новой записи.
Давайте установим поле UserID в качестве первичного ключа, который автоматически генерирует новое значение:


UserID int NOT NULL 
AUTO_INCREMENT,
PRIMARY KEY (UserID)
-- делаем чтоб user id на автомате увеличивался на единицу




35
Использование Ограничений
В примере ниже продемонстрировано, как создать таблицу, используя ограничения.


CREATE TABLE Users (
id int NOT NULL AUTO_INCREMENT,
username varchar(40) NOT NULL, 
password varchar(10) NOT NULL,
PRIMARY KEY(id)
);


-- id сделали авто инкрементильными (автовод)
 И премиальными 
 Username password не равны нулю




Следующий SQL предупреждает, что столбцы "id", "username", и "password" не поддерживают NULL значения. Мы также определили столбец "id" в качестве автоматически-инкрементируемого поля первичного значения. 




При вставке новой записи в таблицу Users нет необходимости определять значение для столбца id; уникальное новое значение будет добавлено автоматически.




36
ALTER TABLE
Команда ALTER TABLE используется для добавления, удаления, модифицирования столбцов в существующей таблице.
Вы также можете использовать команду ALTER TABLE для добавления и удаления различных ограничений у существующей таблицы.
Рассмотрим следующую таблицу People.


ALTER TABLE People ADD 
DateofBirthDate;


В таблицу People добавляю новую колонку DateofBirthDate




Все значения будут null по умолчанию


ALTER TABLE students
ADD speciality varchar(50)


-- добавил специальность 




37 СБРОС ДАННЫХ


ALTER TABLE People 
DROP COLUMN DateofBirth;
-- удаляю колонку DateofBirth


DROP TABLE People;
--удаляю вообще таблицу 




Удаление таблицы приведет к полной потере информации, хранящейся в таблице!




38 Переименование
ALTER TABLE People
CHANGE FirstName name
varchar(100);


Переименовали FirstName на name 


RENAME People TO Users;
--Переименовываем таблицу с People на users 


Переименовали таблицу 


39


Представления
В SQL, VIEW является виртуальной таблицей основанной на результирующем наборе SQL выражения.
Представление содержит строки и столбцы, также как и настоящая таблица. Поля в представлении являются полями из одной и более настоящих таблиц в базе данных.
Представления позволяют нам:
- Структурировать информацию таким способом, который пользователи или классы пользователей считают натуральным и интуитивно понятным.
- Ограничивать доступ к информации таким образом, чтобы пользователь мог видеть и (иногда) модифицировать только то, что ему нужно, и ничего больше.
- Суммировать информацию из различных таблиц и использовать ее для генерации отчетов.




40
Создание Представлений
Рассмотрим таблицу Employees, которая содержит следующие записи.


Давайте создадим представление, которое отображает FirstName и Salary каждого работника.


CREATE VIEW List AS
SELECT FirstName, Salary
FROM Employees;
-- создал виртуальную таблицу List как (AS) таблицу Employees с указанными колонками 


SELECT * FROM List;
Вызываю данную таблицу 




Представление всегда отображает обновленную информацию! Движок базы данных использует SQL выражение представления для обновления данных, каждый раз, когда пользователь запрашивает представление.




41
Обновление Представлений
Вы можете обновить представление, используя следующий синтаксис:


 В примере ниже обновляется наше представление List для выбора LastName


CREATE OR REPLACE VIEW List AS
SELECT FirstName, LastName, Salary
FROM Employees;


-- мы просто к виртуальной таблице добавили LastName .


DROP VIEW List;


Удалил таблицу List.


Обновление в VIEW идёт автоматом.










_______________________________________________________________________________________________________________
Практика
 
 ЗАДАНИЕ 1.1
/*Вывести логин и пароль тех пользователей, у кого имя не Mike */
 
 SELECT login,password FROM supportContacts 
 WHERE NOT name = 'Mike';
 
 ЗАДАНИЕ 1.2
/* Вывести 3 записи, где пароль начинается с 12*/
 
 SELECT * FROM supportContacts WHERE password LIKE '12%' LIMIT 3;
 
ЗАДАНИЕ 1.3
/* Вывести все поля для Nick Bonner */
 
SELECT * FROM supportContacts WHERE surname = 'Bonner';
 
Задание 1.4
/*Выбрать из таблицы значения для Nick, у которого логин LogNick */
 
SELECT * FROM supportContacts WHERE login = 'LogNick';
 
Задание 1.5
/*Вывести поля имя, логин и пароль, отсортировать по убыванию по Name */
SELECT name,login,password FROM supportContacts
ORDER BY name  DESC;
 
Задание 1.6
/*Вывести уникальные имена */
SELECT  DISTINCT name FROM supportContacts
 
 
Задание 3
 
Select level,race FROM character
WHERE level > 45 and race = 'dwarf';
 
 
Задание 4
 
/*Зайти на главную страницу SQL fiddle и создать свою таблицу.
Использовать команды Create, Insert into, Update, Delete*/
 
CREATE TABLE Employee
    (
     id int auto_increment primary key, 
     firstname varchar(50), 
     lastname varchar(50),
     age varchar(10),
     city varchar(20),
     experience varchar (100),
     phonenumber varchar(7)
    );
INSERT INTO Employee (firstname, lastname, age, city, experience,phonenumber)
VALUES ('Sam', 'Rybkin', '30', 'Minsk', '5', '3030034'),
       ('Katy', 'lash', '31', 'Chicago', '10', '2937031'),
       ('Vlad', 'Niger', '24', 'Minsk', '1', '2744382'),
       ('Vladimir', 'Kurilkin', '24', 'Minsk', '10', '674384'),
       ('Natasha', 'Rybkova', '27', 'Minsk', '8', '6754356');
       
  UPDATE Employee
  SET age = 31 WHERE ID=1;
  
  DELETE FROM Employee
  WHERE ID=3;
 
Задание 5.1
 
/*Вывести всех, что живет в Лондоне*/
SELECT * FROM Customers
WHERE City = 'London';
 
Задание 5.2
/*Выбрать имена контактов и имена заказчиков, где адрес заканчивается
на 23*/
SELECT ContactName, CustomerName FROM Customers
WHERE Address LIKE '%23';
 
 
Задание 5.3
/*Выбрать уникальные города.*/
SELECT DISTINCT City FROM Customers;  # уникальное значение
 
Задание 5.4
/* Выбрать тех пользователей, у кого код начинается с 0 (нуль)*/
SELECT * FROM Customers
WHERE PostalCode LIKE '0%';
 
 
Задание 5.5.
/*Вывести клиентов не из США*/
SELECT * FROM Customers
WHERE Country NOT IN('USA');
 
 
Задание 5.6.
/*6.Вывести всех, кто из Франции и отсортировать по убыванию по имени
контакта*/
SELECT * FROM Customers
WHERE Country IN('France')
ORDER BY ContactName DESC;
 
 
Задание 5.7.
/*7. Вывести клиентов из Германии и США, ограничить выбор 10 записями*/
 
SELECT CustomerName FROM Customers 
WHERE Country='Germany' OR Country='USA' LIMIT 10;
 
 
 
 https://sitear.ru/material/mysql-zaprosy
хорошая статья!!! sql запросы 


https://neoblogs.net/2013/10/23/rabota-s-mysql-serverom-s-pomoshhyu-komandnoj-stroki-terminala-linux/
SQL для linux






Kiril Linux SQL


105.3 Создание БД MySQL
Mysql реализация от Oracle
1.sudo apt-get install mysql-server
2. mysql -u root -p зайти u user p password
3. sudo mysql -u root # без пароля
4.  CREATE DATABASE cars; # создали
5. USE cars; # актвировали
6. CREATE TABLE new (brand VARCHAR(10), model VARCHAR(10), year YEAR, price INT);
7. CREATE TABLE used (brand VARCHAR(10), model VARCHAR(10), year YEAR, price INT);
8.SHOW TABLES; # ПОСМОТРЕТЬ ТАБЛИЦЫ
9.DESCRIBE new; # даст описание табл с команды выше
10.exit выйти с mysql или ctrl + Z на background


LPIC 105.3 часть вторая: Заполнение БД MySQL
11.nano new.txt
KIA     CERATO  2014    780000
KIA     RIO     2015    530000
FORD    FOCUS   2015    620000


nano used.txt
KIA    CERANO    2011    460000
HYUNDAI    Solaris    2012    490000
LADA    Granta    2013    180000
12. sudo mysql --local-infile=1 -u root # infile input file 1 yes разрешить u user просто без пароля
запуск режима импрота данных
13.USE cars; # переключились на базу данных с машинами
14.LOAD DATA LOCAL INFILE "new.txt" INTO TABLE new;
# главное чтобы mysql была запущена с папки или места где эти файлы лежат, то есть вставляем данные
15.LOAD DATA LOCAL INFILE "used.txt" INTO TABLE used;
# тоже самое только для старых машин
16. SELECT * FROM new; # смотрим таблицу новых машин
17. SELECT * FROM used; # старые машины
18. INSERT INTO new (brand, model, year) VALUES ('Daewoo', 'Nexia', '2015'); # можно вводить в любой последовательности год и модель значения в кавычках
19. INSERT INTO new (brand, model, year) VALUES ('Daewoo', 'Matiz', '2014');
20.DELETE FROM new WHERE model="Matiz"; # удаляю по любому ключу указанному в таблице выше
21.SELECT * FROM new; # смотрю что удалена строка вся


LPIC 105.3 часть третья: Получение информации из БД MySQL
22.mysql cars -u root # подключаюсь к базе даных
23. SHOW TABLES; # смотрю таблицы какие есть
24.SELECT * FROM new; # смотрю таблицу 
25. SELECT model FROM new; # вытягиваю модели ячейку модель
26. SELECT * FROM new WHERE brand="KIA"; # достанет всю инфу по KIA со всей моделью
27.SELECT * FROM new WHERE brand="KIA" AND year="2015";
# выбрать и по модели и погоду
28.SELECT model FROM new WHERE brand="KIA" AND year="2015"; # выдаст модель этого года
29. SELECT * FROM new;
30. UPDATE new SET model='KUGA' WHERE model='FOCUS'; # new таблица
31. SELECT * FROM new; #смотрю все поменино
32. SELECT * FROM new JOIN used
33. SELECT * FROM new JOIN used ON new.brand = used.brand;
# объединить on где у таблицы new, графа brand совпадает с таблицей used графа brand, будут склеены как бы две таблицы,  но путь к значению можно писать полный cars.new.brand # cars база данных
34. SELECT * FROM new;
35. SELECT * FROM new ORDER BY brand; # в алфавитном порядке по brand;
36.SELECT * FROM new GROUP BY brand; # объединит все KIA в одну колонку;




http://artemfedorov.ru/etc/mysql/field-types/
типы данных












































